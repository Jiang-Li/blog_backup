)
date <- sample(c("A", "B", "C"), N, replace = TRUE)
value1 <- sample(1:10)
value2 <- sample(1:10)
df <- data.frame(class, date, value1, value2)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
View(df)
nrow(df)
nrow(df)
df %>% count()
nrow(df)
df %>% count()
names(df)
blogdown:::serve_site()
library(knitr)
library(tidyverse)
library(feather)
opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
set.seed(1)
N <- 1000
class <- sample(
seq(
as.Date("2012/01/01"),
as.Date("2012/01/31"),
by = "day"
),
N,
replace = T
)
date <- sample(c("A", "B", "C"), N, replace = TRUE)
value1 <- sample(1:10)
value2 <- sample(1:10)
df <- data.frame(class, date, value1, value2)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
nrow(df)
df %>% count()
names(df)
lapply(df, class)
colSums(is.na(df))
blogdown:::serve_site()
install.packages("processx")
install.packages("later")
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
library(knitr)
library(tidyverse)
library(feather)
library(knitr)
library(tidyverse)
library(feather)
library(knitr)
library(tidyverse)
library(feather)
library(knitr)
library(tidyverse)
library(feather)
blogdown:::serve_site()
library(knitr)
library(tidyverse)
library(feather)
library(knitr)
library(tidyverse)
library(feather)
install.packages("feather")
library(knitr)
library(tidyverse)
library(feather)
# opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
set.seed(1)
N <- 1000
class <- sample(
seq(
as.Date("2012/01/01"),
as.Date("2012/01/31"),
by = "day"
),
N,
replace = T
)
date <- sample(c("A", "B", "C"), N, replace = TRUE)
value1 <- sample(1:10)
value2 <- sample(1:10)
df <- data.frame(class, date, value1, value2)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
nrow(df)
df %>% count()
names(df)
lapply(df, class)
colSums(is.na(df))
install.packages("reticulate")
colSums(is.na(df))
no_missing <- df[!is.na(df)]
colSums(is.na(df))
no_missing <- df[!is.na(df)]
colSums(is.na(no_missing))
colSums(is.na(df))
no_missing <- df[!is.na(df)]
colSums(no_missing)
colSums(is.na(df))
no_missing <- df[!is.na(df)]
colSums(is.na(no_missing))
colSums(is.na(df))
no_missing <- df[!is.na(df),]
colSums(is.na(no_missing))
View(no_missing)
colSums(is.na(df))
no_missing <- df[is.na(df),]
colSums(is.na(no_missing))
is.na(df)
colSums(is.na(df))
no_missing <- na.omit(df)
colSums(is.na(no_missing))
no_missing <- na.omit(df)
colSums(is.na(no_missing))
rowSums(is.na(df))!=ncol(df)
no_all_missing <- df[rowSums(is.na(df))!=ncol(df), ]
colSums(is.na(no_missing))
no_all_missing <- df[rowSums(is.na(df))!=ncol(df), ]
colSums(is.na(no_all_missing))
no_all_missing <- df[rowSums(is.na(df))!=ncol(df), ]
no_all_row_missing <- df[rowSums(is.na(df))!=ncol(df), ]
install.packages("acs")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggplot2")
library(maps)
install.packages("maps")
county.df=map_data("county")
names(county.df)[5:6]=c("state","county")
state.df=map_data("state")
us.county=geo.make(state="*", county="*")
us.transport=acs.fetch(geography=us.county,
table.number="B08301", col.names="pretty")
us.pub.trans=divide.acs(numerator=us.transport[,10],
denominator=us.transport[,1], method="proportion")
pub.trans.est=data.frame(county=geography(us.pub.trans)[[1]],
percent.pub.trans=as.numeric(estimate(us.pub.trans)))
pub.trans.est$county=gsub("Parish", "County", pub.trans.est$county)
pub.trans.est$state=tolower(gsub("^.*County, ", "", pub.trans.est$county))
pub.trans.est$county=tolower(gsub(" County,.*", "", pub.trans.est$county))
choropleth=merge(county.df, pub.trans.est, by=c("state","county"))
choropleth=choropleth[order(choropleth$order), ]
choropleth$pub.trans.rate.d=cut(choropleth$percent.pub.trans,
breaks=c(0,.01,.02,.03,.04,.05,.1,1), include.lowest=T)
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = pub.trans.rate.d), colour = "white", size = 0.2) +
geom_polygon(data = state.df, colour = "white", fill = NA) +
scale_fill_brewer(palette = "Purples")
county.df=map_data("county")
library(acs)
library(ggplot2)
library(maps)
county.df=map_data("county")
names(county.df)[5:6]=c("state","county")
state.df=map_data("state")
us.county=geo.make(state="*", county="*")
us.transport=acs.fetch(geography=us.county,
table.number="B08301", col.names="pretty")
us.pub.trans=divide.acs(numerator=us.transport[,10],
denominator=us.transport[,1], method="proportion")
pub.trans.est=data.frame(county=geography(us.pub.trans)[[1]],
percent.pub.trans=as.numeric(estimate(us.pub.trans)))
pub.trans.est$county=gsub("Parish", "County", pub.trans.est$county)
pub.trans.est$state=tolower(gsub("^.*County, ", "", pub.trans.est$county))
pub.trans.est$county=tolower(gsub(" County,.*", "", pub.trans.est$county))
choropleth=merge(county.df, pub.trans.est, by=c("state","county"))
choropleth=choropleth[order(choropleth$order), ]
choropleth$pub.trans.rate.d=cut(choropleth$percent.pub.trans,
breaks=c(0,.01,.02,.03,.04,.05,.1,1), include.lowest=T)
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = pub.trans.rate.d), colour = "white", size = 0.2) +
geom_polygon(data = state.df, colour = "white", fill = NA) +
scale_fill_brewer(palette = "Purples")
county.df=map_data("county")
names(county.df)[5:6]=c("state","county")
us.county=geo.make(state="*", county="*")
us.transport=acs.fetch(geography=us.county,
table.number="B08301", col.names="pretty")
us.pub.trans=divide.acs(numerator=us.transport[,10],
denominator=us.transport[,1], method="proportion")
pub.trans.est=data.frame(county=geography(us.pub.trans)[[1]],
percent.pub.trans=as.numeric(estimate(us.pub.trans)))
install.packages("tidycensus")
install.packages("mapview")
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430", install = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
options(tigris_use_cache = TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430", install = TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430", install = TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430",
install = T,
overwrite = T)
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
mapview(ny, zcol = "estimate", legend = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Columbus",
geometry = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_39",
state = "OH",
county = "Columbus",
geometry = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
View(ny)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Columbus",
geometry = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Columbus",
geometry = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
mapview(ny, zcol = "estimate", legend = TRUE)
View(ny)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Columbus",
geometry = TRUE)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Franklin",
geometry = TRUE)
mapview(df, zcol = "estimate", legend = TRUE)
blogdown:::new_post_addin()
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
# census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430",
#                install = T,
#                overwrite = T)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Franklin",
geometry = TRUE)
mapview(df, zcol = "estimate", legend = TRUE)
blogdown:::serve_site()
library(knitr)
library(tidyverse)
library(feather)
# opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
colSums(is.na(df))
print("test")
blogdown:::serve_site()
blogdown:::serve_site()
install.packages(c("callr", "digest", "h2o", "haven", "hms", "knitr", "lubridate", "MASS", "mgcv", "openssl", "pillar", "Rcpp", "reprex", "rpart", "tibble", "tidyr", "viridisLite", "xml2"))
install.packages(c("callr", "digest", "h2o", "haven", "hms", "knitr", "lubridate", "MASS", "mgcv", "openssl", "pillar", "Rcpp", "reprex", "rpart", "tibble", "tidyr", "viridisLite", "xml2"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("rcurl")
Y
install.packages("RCurl")
blogdown:::serve_site()
build_site()
blogdown::build_site()
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
library(tidycensus)
library(mapview)
options(tigris_use_cache = TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430",
install = T,
overwrite = T)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Franklin",
geometry = TRUE)
census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430",
install = T,
overwrite = T)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Franklin",
geometry = TRUE)
# census_api_key("37c38f3d2e15304bd682b2fb6da6dd87df896430",
#                install = T,
#                overwrite = T)
df <- get_acs(geography = "tract",
variables = "B19013_001",
state = "OH",
county = "Franklin",
geometry = TRUE)
mapview(df, zcol = "estimate", legend = TRUE)
blogdown::build_site()
library(knitr)
library(tidyverse)
library(feather)
# opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
no_missing <- na.omit(df)
colSums(is.na(no_missing))
no_all_row_missing <- df[rowSums(is.na(df)) < ncol(df), ]
no_all_col_missing <- df <- df[,colSums(is.na(df)) < nrow(df)]
View(df)
library(knitr)
library(tidyverse)
library(feather)
# opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
set.seed(1)
N <- 1000
class <- sample(
seq(
as.Date("2012/01/01"),
as.Date("2012/01/31"),
by = "day"
),
N,
replace = T
)
date <- sample(c("A", "B", "C"), N, replace = TRUE)
value1 <- sample(1:10)
value2 <- sample(1:10)
df <- data.frame(class, date, value1, value2)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
nrow(df)
df %>% count()
names(df)
lapply(df, class)
colSums(is.na(df))
no_missing <- na.omit(df)
colSums(is.na(no_missing))
no_all_row_missing <- df[rowSums(is.na(df)) < ncol(df), ]
no_all_col_missing <- df <- df[,colSums(is.na(df)) < nrow(df)]
fill_missing <- df %>% replace_na(0)
fill_missing <- df %>% replace(., is.na(.), 0)
df %>% replace(., is.na(.), 0)
fill_missing <- df %>% replace(., is.na(.), 0)
fill_missing <- df %>% replace(., is.na(.), "")
fill_missing <- df %>% replace(., is.na(.), 0)
set.seed(1)
N <- 1000
df <- data.frame(
dimension1 <- sample(c("I", "II", "III"), N, replace = T)
dimension2 <- sample(c("A", "B", "C"), N, replace = TRUE)
set.seed(1)
N <- 1000
df <- data.frame(
dimension1 <- sample(c("I", "II", "III"), N, replace = T),
dimension2 <- sample(c("A", "B", "C"), N, replace = TRUE),
measure1 <- sample(1:10),
measure2 <- sample(1:10)
)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
View(df)
set.seed(1)
N <- 1000
df <- data.frame(
"dimension1" <- sample(c("I", "II", "III"), N, replace = T),
"dimension2" <- sample(c("A", "B", "C"), N, replace = TRUE),
"measure1" <- sample(1:10),
"measure2" <- sample(1:10)
)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
View(df)
View(df)
set.seed(1)
N <- 1000
df <- data.frame(
"dimension1" = sample(c("I", "II", "III"), N, replace = T),
"dimension2" = sample(c("A", "B", "C"), N, replace = TRUE),
"measure1" = sample(1:10),
"measure2" = sample(1:10)
)
for (i in 1:ncol(df)) { # Some missings
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
View(df)
library(knitr)
library(tidyverse)
library(feather)
# opts_chunk$set(engine.path = '/Library/Frameworks/Python.framework/Versions/3.6/bin/python3')
set.seed(1)
N <- 1000
df <- data.frame(
"dimension1" = sample(c("I", "II", "III"), N, replace = T),
"dimension2" = sample(c("A", "B", "C"), N, replace = TRUE),
"measure1" = sample(1:10),
"measure2" = sample(1:10)
)
for (i in 1:ncol(df)) { # Some missing values
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
library(feather)
path <- "my_data.feather"
write_feather(df, path)
nrow(df)
df %>% count()
names(df)
lapply(df, class)
colSums(is.na(df))
no_missing <- na.omit(df)
colSums(is.na(no_missing))
no_all_row_missing <- df[rowSums(is.na(df)) < ncol(df), ]
no_all_col_missing <- df <- df[,colSums(is.na(df)) < nrow(df)]
fill_missing <- df %>% replace(., is.na(.), 0)
fill_missing <- df %>% replace(., is.na(.), 0)
set.seed(1)
N <- 1000
df <- tibble(
"dimension1" = sample(c("I", "II", "III"), N, replace = T),
"dimension2" = sample(c("A", "B", "C"), N, replace = TRUE),
"measure1" = sample(1:10),
"measure2" = sample(1:10)
)
set.seed(1)
N <- 1000
df <- tibble(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = TRUE),
measure1 = sample(1:10),
measure2 = sample(1:10)
)
set.seed(1)
N <- 1000
df <- tibble(
dimension1 = sample(c("I", "II", "III"), N, replace = T),
dimension2 = sample(c("A", "B", "C"), N, replace = T),
measure1 = sample(1:10, N, replace = T),
measure2 = sample(1:10, N, replace = T)
)
for (i in 1:ncol(df)) { # Some missing values
df[, i][sample(1:nrow(df), sample(10:50))] <- NA
}
blogdown:::serve_site()
install.packages(c("ddalpha", "lubridate", "openssl", "pbdZMQ", "quantreg", "RcppEigen"))
